# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_API/05_solver.ipynb.

# %% auto 0
__all__ = ['direct_stiffness_method', 'calfem']

# %% ../nbs/02_API/05_solver.ipynb 2
# Copyright Â© 2023-2024  IfcTruss Contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# %% ../nbs/02_API/05_solver.ipynb 4
from collections import namedtuple
from typing import NamedTuple
import pandas as pd

# %% ../nbs/02_API/05_solver.ipynb 5
import ifctruss._direct_stiffness_method
import ifctruss._calfem

# %% ../nbs/02_API/05_solver.ipynb 7
def direct_stiffness_method(
    nodes: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralPointConnection's
    bars: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralCurveMember's
    point_loads: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralLoadSingleForce's
) -> NamedTuple:  # NamedTuple with Pandas DataFrame's and str's
    System = ifctruss._direct_stiffness_method.DirectStiffnessMethod(
        bars=bars,
        nodes=nodes,
        point_loads=point_loads,
    )
    System.extend_nodes_df()
    System.extend_bars_df()
    System.create_element_stiffness_matrices()
    System.create_system_stiffness_matrice()
    System.create_force_vector()
    System.create_reduced_system_stiffness_matrice_and_reduced_force_vector()
    System.calculate_displacement_vector()

    System.calculate_force_vector()
    System.correct_force_vector()

    System.create_internal_force_matrices()
    System.calculate_normal_force()

    System.create_displacment_df()
    displacments = System.displacment_df

    System.create_force_df()
    forces = System.force_df

    System.create_normal_force_df()
    normal_forces = System.normal_force_df

    results = namedtuple(
        "df", "displacments forces normal_forces theory_type is_linear"
    )
    theory_type = "FIRST_ORDER_THEORY"
    is_linear = True
    return results(
        displacments, forces, normal_forces, theory_type, is_linear
    )

# %% ../nbs/02_API/05_solver.ipynb 19
def calfem(
    nodes: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralPointConnection's
    bars: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralCurveMember's
    point_loads: pd.DataFrame,  # Pandas DataFrame with information regarding IfcStructuralLoadSingleForce's
) -> NamedTuple:  # NamedTuple with Pandas DataFrame's and str's
    System = ifctruss._calfem.CALFEM(
        bars=bars,
        nodes=nodes,
        point_loads=point_loads,
    )

    System.extend_nodes_df()
    System.extend_bars_df()
    System.create_element_stiffness_matrices()
    System.create_system_stiffness_matrice()
    System.create_force_vector()
    System.calculate_displacement_vector_and_calculate_force_vector()

    System.correct_force_vector()

    System.calculate_normal_force()

    System.create_displacment_df()
    displacments = System.displacment_df

    System.create_force_df()
    forces = System.force_df

    System.create_normal_force_df()
    normal_forces = System.normal_force_df

    results = namedtuple(
        "df", "displacments forces normal_forces theory_type is_linear"
    )
    theory_type = "FIRST_ORDER_THEORY"
    is_linear = True
    return results(
        displacments, forces, normal_forces, theory_type, is_linear
    )
